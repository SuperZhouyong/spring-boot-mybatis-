package com.resumed.sqtwin.configurer;


import org.apache.ibatis.binding.MapperMethod;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.reflect.MethodSignature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.lang.reflect.Method;

/**
 * @auther Super
 * @data 2018/4/10 0010
 * @time 下午 15:24
 */
@Component
@Aspect
public class DynamicDataSourceAspect {
    private Logger logger = LoggerFactory.getLogger(this.getClass());
    @Before("@annotation(DS)")
    public void beforeSwitchDS(JoinPoint point) {

        //获得当前访问的class
        Class<?> className = point.getTarget().getClass();

        //获得访问的方法名
        String methodName = point.getSignature().getName();
        //得到方法的参数的类型
        Class[] argClass = ((MethodSignature) point.getSignature()).getParameterTypes();
        String dataSource = DataSourceContextHolder.DEFAULT_DS;
        try {
            // 得到访问的方法对象
            Method method = className.getMethod(methodName, argClass);

            // 判断是否存在@DS注解
            if (method.isAnnotationPresent(DS.class)) {
                DS annotation = method.getAnnotation(DS.class);
                // 取出注解中的数据源名
                dataSource = annotation.value();
                logger.info("===============上下文赋值完成:{}",dataSource+"--------------");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        // 切换数据源
        DataSourceContextHolder.setType(dataSource);
    }
     @After("@annotation(DS)")
        public void afterSwitchDS(JoinPoint point){

            DataSourceContextHolder.clear();

        }



  /*  @Pointcut("execution (* com.resumed.sqtwin.dao.*.addSove*(..))")
    public void readMethodPointcut() {
    }

    @Pointcut("execution (* com.resumed.sqtwin.dao.*.addSoveMajor*(..)) ")
    public void writeMethodPointcut() {
    }

    @Before("readMethodPointcut()")
    public void switchReadDataSource() {
        System.out.println("============切换到读数据源===========");
        DataSourceContextHolder.setType(DataSourceContextHolder.Two);
    }

    @Before("writeMethodPointcut()")
    public void switchWriteDataSource() {
        System.out.println("=============切换到写数据源==========");
        DataSourceContextHolder.setType(DataSourceContextHolder.Two);
    }*/


}
